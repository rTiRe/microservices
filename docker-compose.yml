services:
  keycloak_db:
    image: postgres:17.4-alpine3.21
    restart: unless-stopped
    ports:
      - 127.0.0.1:5440:5432
    environment:
      - POSTGRES_USER=${KC_DB_USER}
      - POSTGRES_PASSWORD=${KC_DB_PASS}
      - POSTGRES_DB=${KC_DB_NAME}
    volumes:
      - keycloak_db-data:/var/lib/postgresql/data

  backend_db:
    image: postgres:17.4-alpine3.21
    restart: unless-stopped
    ports:
      - 127.0.0.1:5441:5432
    environment:
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=test
    volumes:
      - backend_db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "test", "-U", "test" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  nginx:
    image: nginx:mainline-alpine3.21
    restart: unless-stopped
    ports:
      - 127.0.0.1:8080:80
    volumes:
      - ./frontend_service:/var/www/web
      - ./configs/nginx:/etc/nginx/templates
    depends_on:
      keycloak:
        condition: service_started
      backend_service:
        condition: service_started

  keycloak:
    image: quay.io/keycloak/keycloak:26.2.0
    restart: unless-stopped
    command: start-dev
    ports:
      - 127.0.0.1:7070:8080
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KC_ADMIN_USER}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KC_ADMIN_PASS}
      - KC_HTTP_ENABLED=false
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://keycloak_db/${KC_DB_NAME}
      - KC_DB_USERNAME=${KC_DB_USER}
      - KC_DB_PASSWORD=${KC_DB_PASS}
      - KEYCLOAK_FRONTEND_URL=http://keycloak:8080
    depends_on:
      - keycloak_db

  centrifugo:
    image: centrifugo/centrifugo:v6.1
    restart: unless-stopped
    command: centrifugo -c config.json
    environment:
      - CENTRIFUGO_ADMIN_PASSWORD=${CENTRIFUGO_ADMIN_PASSWORD}
    volumes:
      - ./configs/centrifugo/config.json:/centrifugo/config.json
    depends_on:
      - keycloak
    ulimits:
      nofile:
        soft: 65535
        hard: 65535

  backend_service:
    build: ./backend_service
    container_name: backend_service
    command: sh -c "poetry run yoyo apply -b && poetry run python -m src"
    stop_signal: SIGINT
    restart: unless-stopped
    depends_on:
      keycloak:
        condition: service_started
      backend_db:
        condition: service_healthy
    volumes:
      - ./backend_service:/usr/src/microservices/backend_service
    ports:
      - "8001:8001"
      - "8010:1337"

volumes:
  keycloak_db-data:
  backend_db-data: